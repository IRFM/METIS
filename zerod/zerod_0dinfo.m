function zs = zerod_0dinfo

zs.pin        = 'total heat power (W)';
zs.ploss      = 'plasma losses power, as defined in ITER basis (W)';
zs.zeff       = 'plasma effective charge with alpha particles';
zs.vp         = 'plasma volume (m^3)';
zs.sp         = 'poloidal plasma surface (m^ 2)';
zs.sext       = 'external plasma surface (m^ 2)';
zs.peri       = 'length of the LCMS (m)';
zs.ane        = 'exponent of electron density profile';
zs.ape        = 'exponent of electron pressure profile';
zs.ate        = 'exponent of electron temperature profile';
zs.nsat       = 'saturation electron density, use for the calculation of density  (m^-3)';
zs.nem        = 'volume averaged electron density (m^-3)';
zs.ne0        = 'estimation central electron density (m^-3)';
zs.nebord     = 'estimation of plasma edge electron density (m^-3)';
zs.negr       = 'Greenwald limit for electron density (m^-3)';
zs.nhem       = 'volume averaged density of helium (m^-3); if option.gaz == 5, encode for volume averaged He3 density and option.frhe0 * zs.nem encode for volume averaged He4 density';
zs.nhe4m      = 'volume averaged density of helium-4 (m^-3) in case of option.gaz == 5, adding accumunication of He4 on option.frhe0 * zs.nem for initial volume averaged He4 density';
zs.nimpm      = 'volume averaged density of impurity (other than helium) (m^-3)';
zs.n1m        = 'volume averaged density of H + D + T ions (m^-3) or H+D if option.gaz = 11';
zs.nDm        = 'volume averaged density of deuterium ions (m^-3)';
zs.nTm        = 'volume averaged density of tritium ions (m^-3); if option.gaz = 11, encode for volume averaged boron density; in this case the tritium density is null';
zs.nim        = 'sum of volume averaged  ions density (m^-3)';
zs.ni0        = 'estimation of central ionic density (m^-3)';
zs.meff       = 'effective mass (number of atomic mass, hydrogenoid ions)';
zs.dwdt       = 'time derivative of total plasma energy (W)';
zs.esup_fus   = 'D-T fusion fast alpha suprathermal energy (J)';
zs.pfus_th    = 'fusion thermal power depostion of alpha particles (W)';
zs.taus_he    = 'caracteristic slowing down time for alpha particules (s)';
zs.esup_nbi   = 'NBI fast ions suprathermal energy (J)';
zs.pnbi_th    = 'NBI thermal power depostion (W)';
zs.taus_nbi   = 'caracteristic slowing down time for NBI fast ions (s)';
zs.esup_icrh  = 'ICRH fast ions suprathermal energy (J)';
zs.picrh_th   = 'ICRH thermal power depostion (W)';
zs.einj_icrh  = 'mean energy of fast ion produce by ICRH in minoritary scheme (eV)';
zs.einj_lh    = 'mean LH electron energy, only define if rip = 1 (eV)';
zs.taus_icrh  = 'caracteristic slowing down time for ICRH fast ions (s)';
zs.esup_lh    = 'LH fast ions suprathermal energy (J)';
zs.plh_th     = 'LH thermal power depostion (W)';
zs.etalh0     = 'LH current drive efficiency @ vloop = 0 (A W^-1 m^-2)';
zs.etalh1     = 'LH current drive efficiency correction due to hot conductivity (A W^-1 m^-2)';
zs.etalh      = 'LH current drive efficiency (A W^-1 m^-2)';
zs.pth        = 'thermal power input, define as tau_E * Pth = Wth (W)';
zs.pion       = 'total thermal power deposition on ions, use in the calculation of  Ti/Te (W); do not include collisional equipartition heat transfer';
zs.pel        = 'total thermal power deposition on electron, use in the calculation of  Ti/Te (W); do not include collisional equipartition heat transfert';
zs.wrlw       = 'plasma energy contents for electron  computed with RLW sacling law (J)';
zs.plossl2h   = 'threshold  power for transition from  L mode to  H mode  for the selected scaling law (W)';
zs.tauthl     = 'confinement time of energy in L mode for the selected scaling law (s)';
zs.tauh       = 'confinement time of energy in H mode for the selected scaling law (s)';
zs.tauhe_l    = 'confinement time of helium impurity/ashes in L mode (s)';
zs.tauhe_h    = 'confinement time of helium impurity/ashes in H mode (s)';
zs.modeh      = 'confinement mode versu time:  0 = L et 1 = H';
zs.taue       = 'energy confinement time (s)';
zs.taue_alt   = 'energy confinement time, Helander & Sigmar definition (s)';
zs.tauhe      = 'confinement time of helium impurity/ashes (s)';
zs.pw         = 'effective power define as taue  * pw = W (W)';
zs.w          = 'total plasma energy (J)';
zs.wdia       = '3/2 perpendicular plasma energy (J)';
zs.wth        = 'thermal plasma energy (J)';
zs.dwdt       = 'time derivative of total plasma energy  (W)';
zs.dwthdt     = 'time derivative of thermal plasma energy (W)';
zs.tite       = 'volume averaged ratio Ti / Te';
zs.te0        = 'estimation of central electron temperature (eV)';
zs.tebord     = 'estimation of plasma  edge electron temperature (eV)';
zs.tem        = 'volume averaged electron temperature (eV)';
zs.ilh        = 'LH current drive(A)';
zs.ifwcd      = 'FWCD current drive(A)';
zs.ifus       = 'fast alpha (fusion) "bootstrap" current (A) ';
zs.ieccd      = 'ECCD current drive(A)';
zs.inbicd     = 'NBI current drive (A)';
zs.ecrit_nbi  = 'critical energy of NBI beam (eV)';
zs.ecrit_icrh = 'critical energy of ICRH accelerated fast ions (eV)';
zs.frloss_icrh = 'part of icrh power lost due to fast ions losses';
zs.icd        = 'total current drive (A)';
zs.iboot      = 'bootstrap current (A)';
zs.iohm       = 'ohmic current (A)';
zs.pohm       = 'ohmic power (W)';
zs.RR         = 'plasma resistor (ohm)';
zs.vloop      = 'loop voltage, as vloop .* iohm = pohm (V)';
zs.qa         = 'edge safety factor';
zs.q95        = 'safety factor @ 95% of poloidal flux';
zs.qmin       = 'estimation of minimal value of safety factor';
zs.q0         = 'estimation of central value of safety factor';
zs.betap      = 'poloidal normalized pressure of the plasma (thermal, ITER definition : betap_th(1))';
zs.betaptot   = 'poloidal normalized pressure of the plasma (total, ITER definition : betap(1))';
zs.ini        = 'total non inductive current (A)';
zs.ip         = 'plasma current (A)';
zs.wbp        = 'poloidal field energy of the plasma (J)';
zs.dwbpdt     = 'time derivative of plasma poloidal field energy (W)';
zs.pfus       = 'total fusion power of alpha for D-T plasma and p-B11 plasma heating the plasma or from charged products for D + He3 (W)';
zs.pfus_nbi   = 'NBI induce fusion power heating the plasma (W)';
zs.salpha     = 'total number of alpha fusion particules from D-T reactions, from p-B11 reactions  per second or from D-He3 reactions (s^-1)';
zs.salpha_he4 = 'total number of helium-4 fusion particules per second from D-T and D-He3 reactions (s^-1)';
zs.salpha_p   = 'total number of proton fusion particules per second from D-He3 and D-D reactions (s^-1)';
zs.salpha_t   = 'total number of tritium fusion particules per second from D-D reactions (s^-1)';
zs.salpha_he3 = 'total number of helium-3 fusion particules per second from D-D reactions (s^-1)';
zs.salpha_n   = 'total number of neutrons per second from D-D and D-T reactions (s^-1)';
zs.ecrit_he   = 'alpha critical energy (eV): for He3 if option.gaz == 5, otherwise for He4';
zs.ecrit_he4_DHe3 = 'critical energy (eV) of helium-4 fusion particules from D-He3 reactions';
zs.ecrit_p_DHe3   = 'critical energy (eV) of proton fusion particules from D-He3 reactions';
zs.ecrit_he3_DDn  = 'critical energy (eV) of helium-3 fusion particules from D-D reactions';
zs.ecrit_t_DDp    = 'critical energy (eV) of tritium fusion particules from D-D reactions';
zs.ecrit_p_DDp    = 'critical energy (eV) of proton fusion particules from D-D reactions';
zs.ecrit_he4_DT   = 'critical energy (eV) of helium-4 fusion particules from D-T reactions';
zs.prad       = 'impurity radition losses in core plasma, without Bremsstrahlung (W)';
zs.pradsol    = 'radiation losses in the SOL (W)';
zs.pbrem      = 'Bremsstrahlung radition losses (W)';
zs.pcyclo     = 'cyclotron radiation losses (W)';
zs.nb         = 'number of convergence loops made';
zs.dw         = 'relative error on w, at the end of convergence';
zs.dpfus      = 'relative error on pfus, at the end of convergence';
zs.dini       = 'relative error on Ini, at the end of convergence';
zs.diboot     = 'relative error on Iboot, at the end of convergence';
zs.temps      = 'time slices vector';
zs.nbar       = 'line averaged electron density (m^-3)';
zs.picrh      = 'ICRH power, decrease of ripple losses in TS (W)';
zs.plh        = 'LH power , decrease of ripple losses in TS (W)';
zs.pnbi       = 'NBI power (W)';
zs.pecrh      = 'ECRH power(W)';
zs.priptherm  = 'TS ripple losses, thermal part (W)';
zs.tauee      = 'scale of electron heat confinement time (s)';
zs.tauii      = 'scale of ion heat confinement time (s)';
zs.tauei      = 'exchange electon/ion heat time (s)';
zs.hitb       = 'H factor of ITB';
zs.xitb       = 'radius of itb due to a revserse shear (estimation,su)';
zs.aitb       = 'effect of itb on temperature peaking factor';
zs.hmhd       = 'H factor limitation due to MHD (BetaN limit)';
zs.betan      = 'normalized total beta of the plasma';
zs.disrup     = 'if = 1, ratiative disruption flag';
zs.pei        = 'equipartition power (W)';
zs.asser      = 'if 1, feedback on vloop is on';
zs.tauj       = 'diffusion time of current (s)';
zs.tauip      = 'carateristic time of  R-L equivalent plasma circuit (s)';
zs.li         = 'internal self inductance (formule 3 of ITER FDR)';
zs.zeffsc     = 'zeff scaling (private data, do not use)';
zs.pfus_loss  = 'fusion power loss due to first orbit losses of fast alpha (estimation, W)';
zs.d0         = 'Shafranov shift (m)';
zs.pped       = 'pressure at the top of piedestal (Pa)';
zs.xnbi       = 'position of the maximum power deposition of NBI(su)';
zs.piqnbi     = 'peaking factor of the NBI power deposition profile  (su)';
zs.xeccd      = 'position of the maximum power deposition of ECCD(su)';
zs.xlh        = 'position of the maximum power deposition of LH  deposition maximum position (su)';
zs.dlh        = 'width of the power deposition of LH (su)';
zs.wrad       = 'estimation of bulk volume averaged toroidal rotation velocity (rad/s)';
zs.xfus       = 'Jalpha  maximum position (su)';
zs.jxfus      = 'Jalpha at xfus (su)';
zs.j0fus      = 'Jalpha at center (usage interne,su)';
zs.pel_icrh   = 'ICRH power going on electron (W)';
zs.pion_icrh  = 'ICRH power going on ions (W)';
zs.pel_nbi    = 'NBI power going on electron (W)';
zs.pion_nbi   = 'NBI power going on ions (W)';
zs.pel_fus    = 'Alpha power going on electron (W)';
zs.pion_fus   = 'Alpha power going on ions (W)';
zs.frnbi      = 'fraction of NBI power absorded in the plasma';
zs.telim      = 'plasma eletron temparature estimation near the divertor plate (eV)';
zs.nelim      = 'plasma eletron density temparature estimation near the divertor plate (m^-3)';
zs.plim       = 'total power estimation on  divertor plate (W)';
zs.peakdiv    = 'divertor peak power surface density estimation  (W/m^2)';
zs.stf        = 'number of wrong data in zs data structure containing NaN or Imag';
zs.fwcorr     = 'internal data to compute tem';
zs.plhthr     = 'additionnal power crossing the LCMS; must be compare to  L->H threshold power (Ryter PPCF 2002)';
zs.qeff       = 'effective safety factor at the edge (computed with ITER formula)';
zs.zmszl      = 'ratio between volume averaged zeff and line averaged zeff ';
zs.plhrip     = 'LH power loss in ripple for Tore Supra (W)';
zs.n0a        = 'number of cold neutral that input in plasma at the edge every second coming from recycling and gaz puff (s^-1)';
zs.rres       = 'ICRF resonance layer radial position (m)';
zs.xres       = 'ICRF resonance layer normalized radius position';
zs.rm         = 'sqrt(PHI/pi/B0) of LCMS  (m) ';
zs.drmdt      = 'd  sqrt(PHI/pi/B0) / dt  of LCMS(m/s) ';
zs.ndd        = 'total DD neutrons per second (s^-1)';
zs.ndd_th     = 'plasma/plasma DD neutrons per second (s^-1)';
zs.ndd_nbi_th = 'beam/plasma DD neutrons per second (s^-1)';
zs.ndd_nbi_nbi= 'beam/beam DD neutrons  per second (s^-1)';
zs.pddfus     = 'fusion power from DD reactions (W)';
zs.pttfus     = 'fusion power from TT reactions (W)';
zs.mu0_nbi    = 'initial value of pitch angle for NBI (V// / V'')';
zs.efficiency = 'Fisch like LH current drive efficiency for LHCD(A/W/m^2)';
zs.fracmino   = 'minority ions fraction accelerated by ICRH';
zs.pelec      = 'reactor electric power provide to the network (W)';
zs.pped       = 'total pressure @ pedestal top (Pa)';
zs.ppedmax    = 'maximal allowed total pressure @ pedestal top (Pa)';
zs.piqj       = 'peaking factor of current profile';
zs.vmes       = 'loop voltage as measured on a fixed magnetic loop (V)';
zs.pioniz     = 'power losses due to cold neutral ionization and charge exchange betweens ion and cold neutrals(W)';
zs.pioniz_i   = 'power losses due to charge exchange betweens ion and cold neutrals (W)';
zs.irun       = 'runaway current (A)';
zs.difcurconv = 'current diffusion solver state';
zs.ipar       = 'plasma current // B (A)';
zs.xpoint     = 'flag for diverted plasma;for plasma in limiter mode = 0; for plamsa in divertor mode = 1';
zs.harm       = 'ICRH minority scheme harmonic';
zs.nmino      = 'volume averaged ICRH minority density';
zs.einj_nbi_icrh = 'beam energy including ICRH effects (eV; reserved for internal used only)';
zs.pnbi_icrh     = 'equivalent beam power increase needs for neutron rate enhancement due to  ICRH synergy effects (W)';
zs.ialign     = 'current drive alignment quality parameter (1 = good , 0 = bad)';
zs.frac_pellet = 'fraction of fuelling due to pellet';

% terme correctif pour le caclul de ploss a faible pression (ramp up)
zs.dwmagtordt   = 'time derivative of toroidal magnetic plasma energy  (W)';
zs.wmagtor      = 'toroidal magnetic plasma energy  (J)';
zs.phiplasma    = 'toroidal magnetic flux due to  the plasam (Wb)';

% donnees redondantes crees pour la compatibilite avec l'ITM
zs.tibord     = 'edge ion temperature (eV)';
zs.nibord     = 'edge ion density (m^-3)';
zs.xped       = 'pedestal normalized position';
zs.teped      = 'top electron pedestal temperature (eV)';
zs.tiped      = 'top ion pedestal temperature (eV)';
zs.neped      = 'top electron pedestal density (m^-3)';
zs.niped      = 'top ion pedestal density (m^-3)';
zs.edgeflux   = 'poloidal flux at the edge of plasma (V s)';
zs.indice_inv = 'sawtooth invert radius indice';
zs.sn0fr      = 'friction source on edge neutral that damps the toroidal rotation (N m)';
zs.snbi       = 'rotation torque due to NBI (N m)';
zs.wrot       = 'toroidal plasma rotation stored energy (J)';
zs.slh        = 'rotation torque due to LHCD and ECCD (N m)';

% donnees complementaire de la nouvelle version
zs.taup       = 'confinement time of matter (s)';
zs.poynting   = 'flux of Poynting vector through the LCMS (W)';
zs.nbar_nat   = 'natural density (m^{-3})';


zs.ane_actual = 'actual exponent of electron density profile obtained taking into account the reference and constraints from transport';
zs.nwm        = sprintf('%s\n%s\n%s','volume averaged tungsten density (m^-3);', ...
                        'if option.Sn_fraction > 0, nwm become the sum of the density of W and Sn:', ...
                               '<n_W> = (1 - option.Sn_fraction) * nwm & <n_Sn> =  option.Sn_fraction * nwm.');
zs.dsol       = 'caracteristic SOL width (lambda_q,  m)';

% breakdown variables
zs.eddy_current       = 'Eddy current in passive structure for breakdown description (A)';
zs.flux_edge_cor      = 'Poloidal flux modification of reference cons.flux due to eddy current (Wb/ (2*pi))';

% NBI analysis
zs.firstorb_nbi       = 'fraction of NBI power lost due to fast ion first orbit loss';
	
% for ST temperature evoltution computation in evolution mode
zs.kidds_evol  = 'facteur applique au coefficient de transport de Te pour la simulation de dents de scie en mode evolution';


zs = orderfields(zs);
